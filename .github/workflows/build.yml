name: Build and Release Electron App

on:
  push:
    branches: [master]
    paths: ['**']
  pull_request:
    branches: [master]
    paths: ['**']

jobs:
  build-linux: # Renamed from build
    runs-on: ubuntu-latest
    outputs:
      tag: v1.0.${{ github.run_number }}.${{ github.run_attempt }} # Modified for uniqueness

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild

      - name: Build Electron app for Linux
        run: npm run build && npm run dist

      - name: Create and push tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          TAG=v1.0.${{ github.run_number }}.${{ github.run_attempt }} # Modified for uniqueness
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          git tag $TAG
          git push origin $TAG
        # export tag name for downstream job
        # id: tag # This id is not used by job outputs, but doesn't harm

      - name: Upload Linux build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-artifact # Specific name for Linux artifact
          path: dist/

  build-windows:
    runs-on: windows-latest
    needs: build-linux # Optional: can run in parallel if tag creation is not a hard dependency for starting this build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild

      - name: Build Electron app for Windows
        run: npm run build && npm run dist

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifact # Specific name for Windows artifact
          path: dist/

  release:
    needs: [build-linux, build-windows] # Depends on both builds
    runs-on: ubuntu-latest
    if: needs.build-linux.outputs.tag != '' # Uses tag from build-linux

    steps:
      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build-artifact
          path: release-files/linux

      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build-artifact
          path: release-files/windows

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-linux.outputs.tag }} # Uses tag from build-linux
          name: Release ${{ needs.build-linux.outputs.tag }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-linux.outputs.tag }} # Uses tag from build-linux
          files: |
            release-files/linux/*.AppImage
            release-files/windows/* Setup *.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
