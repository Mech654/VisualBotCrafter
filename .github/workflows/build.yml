name: Build and Release Electron App

on:
  push:
    branches: [master]
    paths: ['**']
  pull_request:
    branches: [master]
    paths: ['**']

jobs:
  build-linux:
    runs-on: ubuntu-latest
    outputs:
      BASE_TAG_PART: v1.0.${{ github.run_number }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild

      - name: Build Electron app for Linux
        run: npm run build && npm run dist

      - name: Create and push initial tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          INITIAL_TAG="v1.0.${{ github.run_number }}.1"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          if git rev-parse "$INITIAL_TAG" >/dev/null 2>&1; then
            echo "Initial tag $INITIAL_TAG already exists locally."
            if ! git ls-remote --tags origin | grep -q "refs/tags/$INITIAL_TAG$"; then
              echo "Pushing existing local initial tag $INITIAL_TAG to remote."
              git push origin "$INITIAL_TAG"
            else
              echo "Initial tag $INITIAL_TAG already exists on remote."
            fi
          else
            echo "Creating and pushing initial tag $INITIAL_TAG."
            git tag "$INITIAL_TAG"
            git push origin "$INITIAL_TAG"
          fi

      - name: Upload Linux build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-artifact
          path: dist/

  build-windows:
    runs-on: windows-latest
    needs: build-linux
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Rebuild native modules for Electron
        run: npx electron-rebuild

      - name: Build Electron app for Windows
        run: npm run build && npm run dist

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-artifact
          path: dist/

  release:
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    env:
      CURRENT_RELEASE_TAG: ${{ needs.build-linux.outputs.BASE_TAG_PART }}.1

    steps:
      - name: Download Linux build artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-build-artifact
          path: release-files/linux

      - name: Download Windows build artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-build-artifact
          path: release-files/windows

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.CURRENT_RELEASE_TAG }}
          name: Release ${{ env.CURRENT_RELEASE_TAG }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.CURRENT_RELEASE_TAG }}
          files: |
            release-files/linux/*.AppImage
            release-files/windows/* Setup *.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
