// Port styles
@use '../abstracts/variables' as *;
@use '../abstracts/mixins' as *;
@use 'sass:color';

// Flow port containers
.flow-ports {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: flex-start;
  width: 100%;
  position: absolute;
  left: 0;
  top: 40px; // Align with the bottom of the node header
  z-index: $z-index-port;
  pointer-events: none;
  padding: 0 $spacing-xs;
}

.flow-input-ports,
.flow-output-ports {
  display: flex;
  flex-direction: column;
  gap: $spacing-sm;
  pointer-events: auto;
}

.flow-input-ports {
  align-items: flex-start;
  margin-left: -12px;
}

.flow-gap {
  flex-grow: 1;
  min-width: 40px;
}

.flow-output-ports {
  align-items: flex-end;
  margin-right: -12px;
}

// Flow port styling
.flow-port {
  width: 18px;
  height: 18px;
  background: linear-gradient(135deg, $flow-color, color.adjust($flow-color, $lightness: -15%));
  border-radius: 50%;
  cursor: crosshair;
  transition: all $transition-time-fast $transition-function;
  border: 2px solid $background;
  box-shadow: 0 0 0 1px rgba($flow-color, 0.5);
  position: relative;
  
  &:hover {
    transform: scale(1.2);
    box-shadow: 0 0 0 2px rgba($flow-color, 0.3), 0 0 5px rgba($flow-color, 0.5);
  }
  
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background-color: color.adjust($flow-color, $lightness: 30%);
    opacity: 0;
    transition: opacity $transition-time-fast $transition-function;
  }
  
  &:hover::after {
    opacity: 1;
  }
  
  &.connecting {
    animation: flow-port-pulse 1.5s infinite;
  }
  
  // Flow port connection state
  &.connected {
    border-color: color.adjust($flow-color, $lightness: 20%);
    box-shadow: 0 0 0 1px rgba($flow-color, 0.8);
    
    &::after {
      opacity: 1;
      background-color: white;
    }
  }
  
  &.incompatible {
    box-shadow: 0 0 0 2px rgba($danger, 0.8);
    opacity: 0.6;
    cursor: not-allowed;
    background: linear-gradient(135deg, $danger, color.adjust($danger, $lightness: -15%));
  }
  
  &.compatible {
    box-shadow: 0 0 0 2px rgba($success, 0.8);
    transform: scale(1.2);
    background: linear-gradient(135deg, $success, color.adjust($success, $lightness: -15%));
  }
  
  // Flow port type styles based on conditions, options, etc.
  &[data-port-function="next"] {
    background: linear-gradient(135deg, $flow-color, color.adjust($flow-color, $lightness: -15%));
  }
  
  &[data-port-function="true"] {
    background: linear-gradient(135deg, $success, color.adjust($success, $lightness: -15%));
  }
  
  &[data-port-function="false"] {
    background: linear-gradient(135deg, $danger, color.adjust($danger, $lightness: -15%));
  }
  
  &[data-port-function="option"] {
    background: linear-gradient(135deg, $port-options, color.adjust($port-options, $lightness: -15%));
  }
  
  // Port label visibility on hover
  &:hover + .port-label-hidden {
    opacity: 1;
    visibility: visible;
    transform: translateX(0);
  }
}

@keyframes flow-port-pulse {
  0% {
    box-shadow: 0 0 0 0 rgba($flow-color, 0.7);
  }
  70% {
    box-shadow: 0 0 0 8px rgba($flow-color, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba($flow-color, 0);
  }
}

// Data port containers
.data-input-ports,
.data-output-ports {
  display: flex;
  flex-direction: column;
  gap: $spacing-xs;
  min-width: 30%;
}

.data-port-container {
  display: flex;
  align-items: center;
  min-height: 24px;
  margin: $spacing-xs 0;
  position: relative;
  
  &:hover {
    .port-tooltip {
      opacity: 1;
      visibility: visible;
      transform: translate(-50%, -100%);
    }
  }
}

// Port container positioning
.data-input-ports .data-port-container {
  flex-direction: row;
  padding-right: $spacing-xs;
  
  // Ensure label is spaced from port
  .port-label {
    margin-left: $spacing-xs;
    margin-right: 0;
    text-align: left;
  }
  
  .port {
    margin-left: -8px;
  }
}

.data-output-ports .data-port-container {
  flex-direction: row-reverse;
  padding-left: $spacing-xs;
  justify-content: flex-start;
  
  // Ensure label is spaced from port
  .port-label {
    margin-right: $spacing-xs;
    margin-left: 0;
    text-align: right;
  }
  
  .port {
    margin-right: -8px;
  }
}

// Port containers
.port-container {
  display: flex;
  align-items: center;
  gap: $spacing-xs;
  min-height: 24px;
}

// Port labels
.port-label {
  font-size: $font-size-xs;
  color: $text-secondary;
  max-width: 100px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  transition: all $transition-time-fast $transition-function;
  font-weight: $font-weight-regular;
  
  &:hover {
    color: $text-primary;
  }
}

.port-label-hidden {
  position: absolute;
  background-color: $surface;
  color: $text-primary;
  padding: 2px 6px;
  border-radius: $border-radius-sm;
  font-size: $font-size-xs;
  opacity: 0;
  visibility: hidden;
  transition: all $transition-time-fast $transition-function;
  box-shadow: $shadow-sm;
  z-index: $z-index-tooltip;
  white-space: nowrap;
  border: 1px solid $border-color;
}

.flow-input-ports .port-label-hidden {
  left: 20px;
  top: 50%;
  transform: translateY(-50%) translateX(-5px);
}

.flow-output-ports .port-label-hidden {
  right: 20px;
  top: 50%;
  transform: translateY(-50%) translateX(5px);
}

.port-label-small {
  font-size: $font-size-xs;
  color: $text-secondary;
  margin: 0 $spacing-xs;
  font-weight: $font-weight-medium;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

// Main port styling
.port {
  width: 14px;
  height: 14px;
  border-radius: 50%;
  cursor: crosshair;
  border: 2px solid $background;
  transition: all $transition-time-fast $transition-function;
  z-index: $z-index-port;
  position: relative;

  &:hover {
    transform: scale(1.2);
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.2);
    
    & + .port-label, & ~ .port-label {
      color: $text-primary;
    }
  }

  &.active-port {
    transform: scale(1.3);
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.8), 0 0 0 4px $primary;
    z-index: $z-index-port + 100;
    
    & + .port-label, & ~ .port-label {
      color: $primary;
      font-weight: $font-weight-medium;
    }
  }

  &.incompatible {
    box-shadow: 0 0 0 2px rgba($danger, 0.8);
    opacity: 0.6;
    cursor: not-allowed;
    
    & + .port-label, & ~ .port-label {
      color: $danger;
    }
  }

  &.compatible {
    box-shadow: 0 0 0 2px rgba($success, 0.8), 0 0 8px rgba($success, 0.4);
    transform: scale(1.2);
    
    & + .port-label, & ~ .port-label {
      color: $success;
    }
  }
  
  &.connecting {
    animation: data-port-pulse 1.5s infinite;
  }
  
  &.connected {
    border-width: 1px;
    
    &::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 4px;
      height: 4px;
      border-radius: 50%;
      background-color: $background;
    }
  }
}

@keyframes data-port-pulse {
  0% {
    box-shadow: 0 0 0 0 rgba($data-color, 0.7);
  }
  70% {
    box-shadow: 0 0 0 6px rgba($data-color, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba($data-color, 0);
  }
}

// Port type specific styles
.port-control {
  background: linear-gradient(135deg, $port-control, color.adjust($port-control, $lightness: -15%));
  
  &.input-port::before {
    content: '';
    position: absolute;
    top: 50%;
    right: 100%;
    transform: translateY(-50%);
    width: 6px;
    height: 2px;
    background-color: $port-control;
    margin-right: 1px;
  }
  
  &.output-port::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 100%;
    transform: translateY(-50%);
    width: 6px;
    height: 2px;
    background-color: $port-control;
    margin-left: 1px;
  }
}

.port-string {
  background: linear-gradient(135deg, $port-string, color.adjust($port-string, $lightness: -15%));
}

.port-number {
  background: linear-gradient(135deg, $port-number, color.adjust($port-number, $lightness: -15%));
}

.port-boolean {
  background: linear-gradient(135deg, $port-boolean, color.adjust($port-boolean, $lightness: -15%));
}

.port-object {
  background: linear-gradient(135deg, $port-object, color.adjust($port-object, $lightness: -15%));
  border-radius: 2px;
  transform: rotate(45deg);
  width: 12px;
  height: 12px;
  
  &:hover {
    transform: rotate(45deg) scale(1.2);
  }
  
  &.active-port {
    transform: rotate(45deg) scale(1.3);
  }
  
  &.compatible {
    transform: rotate(45deg) scale(1.2);
  }
}

.port-array {
  background: linear-gradient(135deg, $port-array, color.adjust($port-array, $lightness: -15%));
  border-radius: 2px;
}

.port-any {
  background: linear-gradient(135deg, white, color.adjust(white, $lightness: -15%));
  position: relative;
  border: 2px solid $background;
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: white;
    box-shadow: 0 0 2px rgba(0,0,0,0.08);
  }
}

.port-start {
  background: linear-gradient(135deg, $port-start, color.adjust($port-start, $lightness: -15%));
}

.port-input {
  background: linear-gradient(135deg, $port-input, color.adjust($port-input, $lightness: -15%));
}

.port-text {
  background: linear-gradient(135deg, $port-text, color.adjust($port-text, $lightness: -15%));
}

.port-random {
  background: linear-gradient(135deg, $port-random, color.adjust($port-random, $lightness: -15%));
}

.port-increment {
  background: linear-gradient(135deg, $port-increment, color.adjust($port-increment, $lightness: -15%));
}

// Port type indicators - small decorations showing port type
.port-type-indicator {
  display: none !important;
}

// Port tooltip - shows on hover
.port-tooltip {
  position: absolute;
  bottom: 120%;
  left: 50%;
  transform: translateX(-50%) translateY(5px);
  background-color: $surface;
  color: $text-primary;
  padding: $spacing-xs $spacing-sm;
  border-radius: $border-radius-sm;
  font-size: $font-size-xs;
  white-space: nowrap;
  pointer-events: none;
  opacity: 0;
  visibility: hidden;
  transition: all $transition-time-fast $transition-function;
  z-index: $z-index-tooltip;
  box-shadow: $shadow-sm;
  border: 1px solid $border-color;
  max-width: 220px;
  text-align: center;
  
  &::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-width: 5px;
    border-style: solid;
    border-color: $surface transparent transparent transparent;
  }
  
  .port-tooltip-title {
    font-weight: $font-weight-medium;
    margin-bottom: 2px;
  }
  
  .port-tooltip-desc {
    font-size: 10px;
    color: $text-secondary;
    white-space: normal;
  }
  
  .port-tooltip-type {
    display: inline-block;
    padding: 2px 6px;
    border-radius: $border-radius-sm;
    margin-top: 4px;
    font-size: 10px;
    font-weight: $font-weight-medium;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    
    &.type-flow {
      background-color: rgba($flow-color, 0.2);
      color: $flow-color;
    }
    
    &.type-string {
      background-color: rgba($port-string, 0.2);
      color: $port-string;
    }
    
    &.type-number {
      background-color: rgba($port-number, 0.2);
      color: $port-number;
    }
    
    &.type-boolean {
      background-color: rgba($port-boolean, 0.2);
      color: $port-boolean;
    }
    
    &.type-object {
      background-color: rgba($port-object, 0.2);
      color: $port-object;
    }
    
    &.type-array {
      background-color: rgba($port-array, 0.2);
      color: $port-array;
    }
    
    &.type-any {
      background-color: rgba($port-any, 0.2);
      color: $port-any;
    }
  }
}

// Port placement based on node types - adjust port positions per node type
[data-node-type="start"] {
  .flow-output-ports {
    margin-top: $spacing-md;
  }
}

[data-node-type="condition"] {
  .flow-output-ports {
    gap: $spacing-md;
  }
}

[data-node-type="options"] {
  .flow-output-ports {
    gap: $spacing-xs;
  }
}

// Port connection visual cues
.connection-active {
  .port:not(.connecting):not(.compatible):not(.incompatible) {
    opacity: 0.4;
    
    &:hover {
      opacity: 1;
    }
  }
  
  .port.compatible {
    animation: compatible-pulse 1.5s infinite;
  }
}

@keyframes compatible-pulse {
  0% {
    box-shadow: 0 0 0 0 rgba($success, 0.7);
  }
  70% {
    box-shadow: 0 0 0 8px rgba($success, 0);
  }
  100% {
    box-shadow: 0 0 0 0 rgba($success, 0);
  }
}

// Port connections feedback
.connection-pending-source .port {
  cursor: crosshair;
}

.connection-dragging {
  cursor: crosshair;
  
  .node {
    pointer-events: auto;
  }
}

// Connection lines
.connection-path {
  stroke-width: 2;
  fill: none;
  pointer-events: none;
  
  &.flow-connection {
    stroke: $flow-color;
    stroke-linecap: round;
  }
  
  &.data-connection {
    stroke: $data-color;
    stroke-linecap: round;
    stroke-dasharray: 5, 5;
  }
  
  &.connection-highlight {
    stroke-width: 3;
    filter: drop-shadow(0 0 3px rgba($primary, 0.5));
  }
  
  &.connection-selected {
    stroke: $primary;
    stroke-width: 3;
  }
}

// Temporary connection when dragging
.temp-connection {
  stroke-width: 2;
  fill: none;
  stroke-dasharray: 5, 5;
  animation: dash 1s linear infinite;
  
  &.flow-connection {
    stroke: $flow-color;
  }
  
  &.data-connection {
    stroke: $data-color;
  }
  
  &.invalid-connection {
    stroke: $danger;
  }
}

@keyframes dash {
  to {
    stroke-dashoffset: -10;
  }
}

// Connection markers for arrows
.connection-marker {
  fill: $flow-color;
  
  &.data-marker {
    fill: $data-color;
  }
}

// Port hover effects with SVG glow
.port-glow-effect {
  position: absolute;
  top: -4px;
  left: -4px;
  width: 22px;
  height: 22px;
  border-radius: 50%;
  opacity: 0;
  pointer-events: none;
  transition: opacity $transition-time-fast $transition-function;
  filter: blur(2px);
  
  .port:hover + & {
    opacity: 0.8;
  }
  
  // Different colors for different port types
  &.glow-flow {
    background: radial-gradient(circle, rgba($flow-color, 0.8) 0%, rgba($flow-color, 0) 70%);
  }
  
  &.glow-string {
    background: radial-gradient(circle, rgba($port-string, 0.8) 0%, rgba($port-string, 0) 70%);
  }
  
  &.glow-number {
    background: radial-gradient(circle, rgba($port-number, 0.8) 0%, rgba($port-number, 0) 70%);
  }
  
  &.glow-boolean {
    background: radial-gradient(circle, rgba($port-boolean, 0.8) 0%, rgba($port-boolean, 0) 70%);
  }
}

// Port connection counter - small badge showing number of connections
.port-connection-count {
  position: absolute;
  bottom: -4px;
  right: -4px;
  min-width: 12px;
  height: 12px;
  border-radius: 6px;
  background-color: $primary;
  color: white;
  font-size: 8px;
  font-weight: $font-weight-bold;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0 2px;
  border: 1px solid $background;
  box-shadow: $shadow-sm;
  pointer-events: none;
}
